"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class APIError extends Error {
    constructor(cm, httpStatus, response, ...params) {
        // Pass remaining arguments (including vendor specific ones) to parent constructor
        super(...params);
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, APIError);
        }
        this.name = "APIError";
        // Custom debugging information
        this.httpStatus = httpStatus;
        this.callerModule = cm;
        try {
            const r = JSON.parse(response);
            if (Array.isArray(r.errors)) {
                this.errors = r.errors;
            }
            else if (r.errors !== null && typeof r.errors === "object") {
                this.errors = r.errors;
            }
        }
        catch (_a) {
            const unknown = {
                message: "Unknown error",
            };
            this.errors = unknown;
        }
        this.date = new Date();
    }
    static mapErrorMessage(err) {
        var _a;
        if (!(err instanceof APIError)) {
            return err.message;
        }
        const schemaValidationErrors = ["ERR_INVALID_FIELD", "ERR_MISSING_FIELD"];
        const e = err.getError();
        if (err.errors && e.id && schemaValidationErrors.includes(e.id)) {
            const what = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.replace("/data/", "");
            const why = e.message;
            return `Problem with ${what} because of ${why}`;
        }
        if (err.httpStatus === 401) {
            return "Please verify if you have made the request with the right credentials.";
        }
        if (err.httpStatus === 429) {
            return "You need to calm down. You hit the rate limit.";
        }
        if (err.callerModule === 2 /* PostOrder */) {
            if (err.httpStatus === 402) {
                return "Please check your wallet balance.";
            }
        }
        if (err.callerModule === 7 /* ChangeDriver */ ||
            err.callerModule === 6 /* GetDriver */) {
            if (err.httpStatus === 404) {
                return "Driver not found.";
            }
        }
        if (err.callerModule === 4 /* GetOrder */) {
            if (err.httpStatus === 404) {
                return "Order not found.";
            }
        }
        if (err.callerModule === 1 /* GetQuotation */) {
            if (err.httpStatus === 422 && e.id === "ERR_INVALID_QUOTATION_ID") {
                return "Quotation not found.";
            }
        }
        if (e.message) {
            return e.message;
        }
        if (e.id) {
            return e.id;
        }
        return "Unknown error";
    }
    getError() {
        if (this.errors === undefined) {
            return {};
        }
        if (Array.isArray(this.errors)) {
            const e = this.errors;
            return e[0];
        }
        return this.errors;
    }
}
exports.default = APIError;
