"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = __importDefault(require("./base"));
class OrderHTTPClient extends base_1.default {
    static toIOrder(resolve) {
        return (d) => {
            var _a;
            const order = d;
            order.id = order.orderId;
            delete order.orderId;
            (_a = order.stops) === null || _a === void 0 ? void 0 : _a.forEach((stopData) => {
                const stop = stopData;
                stop.id = stop.stopId;
                delete stop.stopId;
            });
            resolve(order);
        };
    }
    post(market, path, body) {
        return new Promise((resolve, reject) => {
            const response = this.makeCall(market, path, body, "POST");
            response
                .then(OrderHTTPClient.toIOrder(resolve))
                .catch(OrderHTTPClient.errorHandler(reject));
        });
    }
    get(market, path) {
        return new Promise((resolve, reject) => {
            const response = this.makeCall(market, path);
            response
                .then(OrderHTTPClient.toIOrder(resolve))
                .catch(OrderHTTPClient.errorHandler(reject));
        });
    }
    delete(market, path) {
        return new Promise((resolve, reject) => {
            const response = this.makeCall(market, path, null, "DELETE");
            response
                .then(() => {
                resolve(true);
            })
                .catch(OrderHTTPClient.errorHandler(reject));
        });
    }
    post_priorityfee(market, path, priorityFee) {
        return new Promise((resolve, reject) => {
            const response = this.makeCall(market, path, priorityFee, "POST");
            response
                .then(() => {
                resolve(true);
            })
                .catch(OrderHTTPClient.errorHandler(reject));
        });
    }
    patch(market, path, body) {
        return new Promise((resolve, reject) => {
            const response = this.makeCall(market, path, body, "PATCH");
            response
                .then(OrderHTTPClient.toIOrder(resolve))
                .catch(OrderHTTPClient.errorHandler(reject));
        });
    }
}
exports.default = OrderHTTPClient;
