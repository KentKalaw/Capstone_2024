"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = __importDefault(require("https"));
const auth_1 = __importDefault(require("../auth"));
const error_1 = __importDefault(require("../error"));
const util_1 = require("./util");
const { version } = require("../../package.json");
class BaseHTTPClient {
    constructor(config) {
        this.config = config;
    }
    static errorHandler(reject) {
        return (error) => {
            if (error instanceof error_1.default) {
                reject(new Error(error_1.default.mapErrorMessage(error)));
            }
            else {
                reject(error);
            }
        };
    }
    makeCall(market, path, body, method = "GET") {
        return new Promise((resolve, reject) => {
            let nodeVersion = "not defined";
            if (typeof process !== "undefined") {
                nodeVersion = process.version;
            }
            const timestamp = Date.now();
            const options = {
                host: this.config.host,
                path,
                method,
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json; charset=UTF-8",
                    "SDK-Type": "nodejs",
                    "SDK-Version": version,
                    "SDK-Language-Version": nodeVersion,
                    Authorization: `hmac ${this.config.publicKey}:${timestamp.toString()}:${(0, auth_1.default)(this.config, method, path, timestamp, body ? `{"data": ${JSON.stringify(body)}}` : undefined)}`,
                    Market: market,
                },
            };
            const request = https_1.default.request(options, (res) => {
                let data = "";
                res.on("data", (chunk) => {
                    data += chunk;
                });
                res.on("close", () => {
                    if (res.statusCode > 299) {
                        reject(new error_1.default((0, util_1.defineCallerModule)(path, method), res.statusCode, data, `Something went wrong with your request.`));
                        return;
                    }
                    if (data.length === 0) {
                        resolve(JSON.parse("{}"));
                        return;
                    }
                    resolve(JSON.parse(data).data);
                });
            });
            if (body) {
                request.useChunkedEncodingByDefault = true;
                request.write(`{"data": ${JSON.stringify(body)}}`);
            }
            request.end();
            request.on("error", (err) => {
                // eslint-disable-next-line no-console
                console.error(`Encountered an error trying to make a request: ${err.message}`);
                reject(new error_1.default((0, util_1.defineCallerModule)(path, method), 0, "", err.message));
            });
        });
    }
}
exports.default = BaseHTTPClient;
